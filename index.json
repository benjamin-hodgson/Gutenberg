{
  "Gutenberg.Alignment.html": {
    "href": "Gutenberg.Alignment.html",
    "title": "Class Alignment | Gutenberg",
    "keywords": "Class Alignment How to behave when composing two Box<T> es with mismatched sizes. Inheritance Object Alignment Declaration public sealed class Alignment : Enum Fields CenterEnd Align the smaller box with the centre of the larger one. If the box can't be exactly centred (because the width difference is an odd number), align it one character closer to the end. Declaration public const Alignment CenterEnd Field Value Type Description Alignment Examples When boxes are being composed vertically, the start of the alignment axis is the left-hand side of the box. var box = Box.FromString(\"abcdefgh\") .Above(\"ijk\", Alignment.CenterEnd) .WithBorder(); Console.Write(box.ToString()); // Output: // ┌────────┐ // │abcdefgh│ // │ ijk │ // └────────┘ When boxes are being composed horiztonally, the start of the alignment axis is the top of the box. var box = Box.FromString(string.Join('\\n', \"abcdefgh\".AsEnumerable())) .LeftOf(string.Join('\\n', \"ijk\".AsEnumerable()), Alignment.CenterEnd) .WithBorder(); Console.Write(box.ToString()); // Output: // ┌──┐ // │a │ // │b │ // │c │ // │di│ // │ej│ // │fk│ // │g │ // │h │ // └──┘ CenterStart Align the smaller box with the centre of the larger one. If the box can't be exactly centred (because the width difference is an odd number), align it one character closer to the start. Declaration public const Alignment CenterStart Field Value Type Description Alignment Examples When boxes are being composed vertically, the start of the alignment axis is the left-hand side of the box. var box = Box.FromString(\"abcdefgh\") .Above(\"ijk\", Alignment.CenterStart) .WithBorder(); Console.Write(box.ToString()); // Output: // ┌────────┐ // │abcdefgh│ // │ ijk │ // └────────┘ When boxes are being composed horiztonally, the start of the alignment axis is the top of the box. var box = Box.FromString(string.Join('\\n', \"abcdefgh\".AsEnumerable())) .LeftOf(string.Join('\\n', \"ijk\".AsEnumerable()), Alignment.CenterStart) .WithBorder(); Console.Write(box.ToString()); // Output: // ┌──┐ // │a │ // │b │ // │ci│ // │dj│ // │ek│ // │f │ // │g │ // │h │ // └──┘ End Align the smaller box with the end (the bottom or right) of the larger one. Declaration public const Alignment End Field Value Type Description Alignment Examples When boxes are being composed vertically, the start of the alignment axis is the left-hand side of the box. var box = Box.FromString(\"abcdefgh\") .Above(\"ijk\", Alignment.End) .WithBorder(); Console.Write(box.ToString()); // Output: // ┌────────┐ // │abcdefgh│ // │ ijk│ // └────────┘ When boxes are being composed horiztonally, the start of the alignment axis is the top of the box. var box = Box.FromString(string.Join('\\n', \"abcdefgh\".AsEnumerable())) .LeftOf(string.Join('\\n', \"ijk\".AsEnumerable()), Alignment.End) .WithBorder(); Console.Write(box.ToString()); // Output: // ┌──┐ // │a │ // │b │ // │c │ // │d │ // │e │ // │fi│ // │gj│ // │hk│ // └──┘ Start Align the smaller box with the start (the top or left) of the larger one. Declaration public const Alignment Start Field Value Type Description Alignment Examples When boxes are being composed vertically, the start of the alignment axis is the left-hand side of the box. var box = Box.FromString(\"abcdefgh\") .Above(\"ijk\", Alignment.Start) .WithBorder(); Console.Write(box.ToString()); // Output: // ┌────────┐ // │abcdefgh│ // │ijk │ // └────────┘ When boxes are being composed horiztonally, the start of the alignment axis is the top of the box. var box = Box.FromString(string.Join('\\n', \"abcdefgh\".AsEnumerable())) .LeftOf(string.Join('\\n', \"ijk\".AsEnumerable()), Alignment.Start) .WithBorder(); Console.Write(box.ToString()); // Output: // ┌──┐ // │ai│ // │bj│ // │ck│ // │d │ // │e │ // │f │ // │g │ // │h │ // └──┘ value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "Gutenberg.Box-1.html": {
    "href": "Gutenberg.Box-1.html",
    "title": "Class Box<T> | Gutenberg",
    "keywords": "Class Box<T> Represents an immutable two-dimensional rectangular box of text. The box can be rendered by an IDocumentRenderer<T> or laid out as part of a Document<T> . Inheritance Object Box<T> Declaration public abstract class Box<T> : Object Type Parameters Name Description T The type of annotations in the box. Remarks Boxes can be composed spatially to create bigger boxes: they can be placed LeftOf(Box<T>, Alignment) , RightOf(Box<T>, Alignment) , Above(Box<T>, Alignment) , and Below(Box<T>, Alignment) one another. You can also put boxes InFrontOf(Box<T>, Alignment) and Behind(Box<T>, Alignment) one another. Text contained in a box that's placed in front of another box will obscure text contained in in the background box. Additionally, boxes may contain Transparent(Int32, Int32) areas, through which background text will be visible. The box may contain annotations - values of type T - which can be interpreted by the IDocumentRenderer<T> . This class is intended to be imported under an alias, since typically the type of annotations won't change within your code: using Box = Gutenberg.Box<MyAnnotation>; . Properties Empty An empty box, with zero Width and Height . Declaration public static Box<T> Empty { get; } Property Value Type Description Box <T> Height The width of the Box<T> in lines. Declaration public int Height { get; } Property Value Type Description Int32 Width The width of the Box<T> in characters. Declaration public int Width { get; } Property Value Type Description Int32 Methods Above(Box<T>, Alignment) Creates a new Box<T> consisting of this box with bottom placed below it. If either of the boxes is narrower than the other, it will be padded with a Transparent(Int32, Int32) box until the Width matches, according to the chosen alignment . See the docs for Alignment for detailed examples of how the alignment affects the layout of the box. Declaration public Box<T> Above(Box<T> bottom, Alignment alignment) Parameters Type Name Description Box <T> bottom The Box<T> to place below this one. Alignment alignment How to align the boxes if one is narrower than the other. Returns Type Description Box <T> A Box<T> consisting of this box with bottom placed below it. Examples var box = Box.FromString(\"abc\") .Above(\"def\") .WithBorder(); Console.Write(box.ToString()); // Output: // ┌───┐ // │abc│ // │def│ // └───┘ See Also Below(Box<T>, Alignment) Annotated(T) Apply an annotation to the current Box<T> . The annotation will be passed to the IDocumentRenderer<T> . Declaration public Box<T> Annotated(T value) Parameters Type Name Description T value The annotation. Returns Type Description Box <T> A copy of the current Box<T> with an annotation applied. Behind(Box<T>, Alignment) Returns a new Box<T> consisting of foreground overlaid onto this one. Text contained within foreground will obscure any corresponding text in this box. If foreground has Transparent(Int32, Int32) areas, the content of this box will be visible through the transparent areas. If either box is shorter or narrower than the other, it will be padded with a Transparent(Int32, Int32) box until the sizes match, according to the chosen alignment . See the docs for Alignment for detailed examples of how the alignment affects the layout of the box. Declaration public Box<T> Behind(Box<T> foreground, Alignment alignment) Parameters Type Name Description Box <T> foreground The Box<T> overlay onto this one. Alignment alignment How to align the boxes if one is smaller than the other. Returns Type Description Box <T> A Box<T> consisting of the content of foreground overlaid onto this box. Examples // a box with a transparent window in the centre var mask = Box.Transparent(1, 1) .LeftOf(\"*\").RightOf(\"*\") .Above(\"***\").Below(\"***\"); var box = Box.FromString(\"abcde\\nfghij\\nklmno\") .Behind(mask, Alignment.CenterStart) .WithBorder(); Console.Write(box.ToString()); // Output: // ┌─────┐ // │a***e│ // │f*h*j│ // │k***o│ // └─────┘ See Also InFrontOf(Box<T>, Alignment) Below(Box<T>, Alignment) Creates a new Box<T> consisting of this box with top placed above it. If either of the boxes is narrower than the other, it will be padded with a Transparent(Int32, Int32) box until the Width matches, according to the chosen alignment . See the docs for Alignment for detailed examples of how the alignment affects the layout of the box. Declaration public Box<T> Below(Box<T> top, Alignment alignment) Parameters Type Name Description Box <T> top The Box<T> to place above this one. Alignment alignment How to align the boxes if one is narrower than the other. Returns Type Description Box <T> A Box<T> consisting of this box with top placed above it. Examples var box = Box.FromString(\"abc\") .Below(\"def\") .WithBorder(); Console.Write(box.ToString()); // Output: // ┌───┐ // │def│ // │abc│ // └───┘ See Also Above(Box<T>, Alignment) FromString(String) Creates a Box<T> containing the specified text . Declaration public static Box<T> FromString(string text) Parameters Type Name Description String text The text to place into a Box<T> . Returns Type Description Box <T> A Box<T> containing the specified text . Remarks If the text contains line breaks, the resulting box's height will be equal to the number of lines in the text, and its width will be equal to the length of the longest line. Each line will be left-aligned. InFrontOf(Box<T>, Alignment) Creates a new Box<T> consisting of this box overlaid onto background . Text contained within this box will obscure any corresponding text in the background . If this box has Transparent(Int32, Int32) areas, the background will be visible through the transparent areas. If either box is shorter or narrower than the other, it will be padded with a Transparent(Int32, Int32) box until the sizes match, according to the chosen alignment . See the docs for Alignment for detailed examples of how the alignment affects the layout of the box. Declaration public Box<T> InFrontOf(Box<T> background, Alignment alignment) Parameters Type Name Description Box <T> background The Box<T> to place behind this one. Alignment alignment How to align the boxes if one is smaller than the other. Returns Type Description Box <T> A Box<T> consisting of this box overlaid onto background . Examples // a box with a transparent window in the centre var mask = Box.Transparent(1, 1) .LeftOf(\"*\").RightOf(\"*\") .Above(\"***\").Below(\"***\"); var box = mask .InFrontOf(\"abcde\\nfghij\\nklmno\", Alignment.CenterStart) .WithBorder(); Console.Write(box.ToString()); // Output: // ┌─────┐ // │a***e│ // │f*h*j│ // │k***o│ // └─────┘ See Also Behind(Box<T>, Alignment) LeftOf(Box<T>, Alignment) Creates a new Box<T> consisting of this box with right placed to its right. If either of the boxes is shorter than the other, it will be padded with a Transparent(Int32, Int32) box until the Height matches, according to the chosen alignment . See the docs for Alignment for detailed examples of how the alignment affects the layout of the box. Declaration public Box<T> LeftOf(Box<T> right, Alignment alignment) Parameters Type Name Description Box <T> right The Box<T> to place to the right of this one. Alignment alignment How to align the boxes if one is shorter than the other. Returns Type Description Box <T> A Box<T> consisting of this box with right placed to the right of it. Examples var box = Box.FromString(string.Join('\\n', \"abc\".AsEnumerable())) .LeftOf(string.Join('\\n', \"def\".AsEnumerable())) .WithBorder(); Console.Write(box.ToString()); // Output: // ┌──┐ // │ad│ // │be│ // │cf│ // └──┘ See Also RightOf(Box<T>, Alignment) MapAnnotations<U>(Func<T, U>) Apply a function to all the annotations in the current document. Declaration public Box<U> MapAnnotations<U>(Func<T, U> selector) Parameters Type Name Description Func <T, U> selector The function to apply to the annotations. Returns Type Description Box <U> A document with all of the annotations replaced with the return value of selector . Type Parameters Name Description U The type of annotations in the resulting box. MapAnnotations<U>(Func<T, IEnumerable<U>>) Apply a function to all the annotations in the current document. If the function returns multiple annotations, the annotations are added in a left-to-right fashion. Declaration public Box<U> MapAnnotations<U>(Func<T, IEnumerable<U>> selector) Parameters Type Name Description Func <T, IEnumerable <U>> selector The function to apply to the annotations. Returns Type Description Box <U> A document with all of the annotations replaced with the return values of selector . Type Parameters Name Description U The type of annotations in the resulting box. Render(IDocumentRenderer<T>, CancellationToken) Write the contents of this Box<T> into the renderer . Declaration public ValueTask Render(IDocumentRenderer<T> renderer, CancellationToken cancellationToken = null) Parameters Type Name Description IDocumentRenderer <T> renderer The renderer. CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which completes when the box has been written to the renderer . RightOf(Box<T>, Alignment) Creates a new Box<T> consisting of this box with left placed to its left. If either of the boxes is shorter than the other, it will be padded with a Transparent(Int32, Int32) box until the Height matches, according to the chosen alignment . See the docs for Alignment for detailed examples of how the alignment affects the layout of the box. Declaration public Box<T> RightOf(Box<T> left, Alignment alignment) Parameters Type Name Description Box <T> left The Box<T> to place to the left of this one. Alignment alignment How to align the boxes if one is shorter than the other. Returns Type Description Box <T> A Box<T> consisting of this box with left placed to the left of it. Examples var box = Box.FromString(string.Join('\\n', \"abc\".AsEnumerable())) .RightOf(string.Join('\\n', \"def\".AsEnumerable())) .WithBorder(); Console.Write(box.ToString()); // Output: // ┌──┐ // │da│ // │eb│ // │fc│ // └──┘ See Also RightOf(Box<T>, Alignment) Select<U>(Func<T, U>) Apply a function to all the annotations in the current document. Declaration public Box<U> Select<U>(Func<T, U> selector) Parameters Type Name Description Func <T, U> selector The function to apply to the annotations. Returns Type Description Box <U> A document with all of the annotations replaced with the return value of selector . Type Parameters Name Description U The type of annotations in the resulting box. ToString() Render this Box<T> as a string. Declaration public override string ToString() Returns Type Description String A string representation of the box. Transparent(Int32, Int32) Creates a transparent Box<T> with the specified dimensions. If the box is placed InFrontOf(Box<T>, Alignment) another box, the other box will be visible through the transparent box. Declaration public static Box<T> Transparent(int width, int height) Parameters Type Name Description Int32 width The width of the box. Int32 height The height of the box. Returns Type Description Box <T> A transparent Box<T> . WithBorder() Creates a Box<T> consisting of the current box with a border drawn around it. Declaration public Box<T> WithBorder() Returns Type Description Box <T> A Box<T> consisting of the current box with a border drawn around it. Examples var box = Box.FromString(\"abc\\ndef\\nghi\") .WithBorder(); Console.Write(box); // Output: // ┌───┐ // │abc│ // │def│ // │ghi│ // └───┘ Write(TextWriter, CancellationToken) Write the Box<T> into a TextWriter . Declaration public ValueTask Write(TextWriter writer, CancellationToken cancellationToken = null) Parameters Type Name Description TextWriter writer The TextWriter . CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the Box<T> has been written to the writer . Operators Implicit(String to Box<T>) Implicitly convert a string to a Box<T> . Declaration public static implicit operator Box<T>(string str) Parameters Type Name Description String str The string. Returns Type Description Box <T> Remarks This implicit conversion is equivalent to FromString(String) ."
  },
  "Gutenberg.Brackets.AllmanBracketer-1.html": {
    "href": "Gutenberg.Brackets.AllmanBracketer-1.html",
    "title": "Class AllmanBracketer<T> | Gutenberg",
    "keywords": "Class AllmanBracketer<T> An IBracketer<T> which uses the Allman style. Inheritance Object AllmanBracketer<T> Implements IBracketer <T> Declaration public class AllmanBracketer<T> : Object, IBracketer<T> Type Parameters Name Description T The type of annotations in the document. Remarks \"The Allman style\" is the name for the bracketing style which is customary in C#. The opening bracket is placed on a new line, the contained document is indented, and the closing bracket is placed on a new line. Examples var bracketer = new AllmanBracketer<object>(\"{\", \"}\", false); var doc = \"header\" + bracketer.Bracket( new Doc[] { \"line 1\", \"line 2\" } .Separated(Doc.LineBreak) ); Console.WriteLine(doc); // Output: // header // { // line 1 // line 2 // } Constructors AllmanBracketer(Document<T>, Document<T>, Boolean, Nullable<Int32>) Creates an IBracketer<T> which uses the Allman style. Declaration public AllmanBracketer(Document<T> openingBracket, Document<T> closingBracket, bool group = true, Nullable<int> nestingLevel = null) Parameters Type Name Description Document <T> openingBracket A Document<T> representing the opening bracket character. Document <T> closingBracket A Document<T> representing the closing bracket character. Boolean group Whether the resulting Document<T> should be grouped — that is, whether the document may be flattened to a single line if it fits. Nullable < Int32 > nestingLevel The amount of indentation to apply to the bracketed document. Methods Bracket(Document<T>) Surrounds the document with brackets. Declaration public Document<T> Bracket(Document<T> document) Parameters Type Name Description Document <T> document The document. Returns Type Description Document <T> The document surrounded with brackets. Implements IBracketer<T>"
  },
  "Gutenberg.Brackets.html": {
    "href": "Gutenberg.Brackets.html",
    "title": "Namespace Gutenberg.Brackets | Gutenberg",
    "keywords": "Namespace Gutenberg.Brackets Classes AllmanBracketer<T> An IBracketer<T> which uses the Allman style. KernighanRitchieBracketer<T> An IBracketer<T> which uses the K&R style. Interfaces IBracketer<T> An interface for objects which know how to surround a Document<T> with brackets."
  },
  "Gutenberg.Brackets.IBracketer-1.html": {
    "href": "Gutenberg.Brackets.IBracketer-1.html",
    "title": "Interface IBracketer<T> | Gutenberg",
    "keywords": "Interface IBracketer<T> An interface for objects which know how to surround a Document<T> with brackets. Declaration public interface IBracketer<T> Type Parameters Name Description T The type of annotations in the document. Methods Bracket(Document<T>) Surrounds the document with brackets. Declaration Document<T> Bracket(Document<T> document) Parameters Type Name Description Document <T> document The document. Returns Type Description Document <T> The document surrounded with brackets."
  },
  "Gutenberg.Brackets.KernighanRitchieBracketer-1.html": {
    "href": "Gutenberg.Brackets.KernighanRitchieBracketer-1.html",
    "title": "Class KernighanRitchieBracketer<T> | Gutenberg",
    "keywords": "Class KernighanRitchieBracketer<T> An IBracketer<T> which uses the K&R style. Inheritance Object KernighanRitchieBracketer<T> Implements IBracketer <T> Declaration public class KernighanRitchieBracketer<T> : Object, IBracketer<T> Type Parameters Name Description T The type of annotations in the document. Remarks \"The K&R style\" is the name for the bracketing style which is customary in C, Java, and JavaScript, among others. The opening bracket is placed on the current line, the contained document is indented, and the closing bracket is placed on a new line. Examples var bracketer = new KernighanRitchieBracketer<object>(\"{\", \"}\", false); var doc = \"header \" + bracketer.Bracket( new Doc[] { \"line 1\", \"line 2\" } .Separated(Doc.LineBreak) ); Console.WriteLine(doc); // Output: // header { // line 1 // line 2 // } Constructors KernighanRitchieBracketer(Document<T>, Document<T>, Boolean, Nullable<Int32>) Creates an IBracketer<T> which uses the K&R style. Declaration public KernighanRitchieBracketer(Document<T> openingBracket, Document<T> closingBracket, bool group = true, Nullable<int> nestingLevel = null) Parameters Type Name Description Document <T> openingBracket A Document<T> representing the opening bracket character. Document <T> closingBracket A Document<T> representing the closing bracket character. Boolean group Whether the resulting Document<T> should be grouped — that is, whether the document may be flattened to a single line if it fits. Nullable < Int32 > nestingLevel The amount of indentation to apply to the bracketed document. Methods Bracket(Document<T>) Surrounds the document with brackets. Declaration public Document<T> Bracket(Document<T> document) Parameters Type Name Description Document <T> document The document. Returns Type Description Document <T> The document surrounded with brackets. Implements IBracketer<T>"
  },
  "Gutenberg.Document-1.html": {
    "href": "Gutenberg.Document-1.html",
    "title": "Class Document<T> | Gutenberg",
    "keywords": "Class Document<T> Represents an immutable textual document which can be laid out in a variety of ways. Once laid out, the document can be rendered by an IDocumentRenderer<T> . A Document<T> 's layout is determined by the available page width, the locations of line breaks within the document, and the locations of groups within the document. The page has a certain maximum width (determined by PageWidth ), which the layout algorithm tries not to exceed, by inserting line breaks where possible. The possible line breaks are indicated by the presence of LineBreak values within the document. A document may contain groups, introduced by the Grouped() method. A group indicates a \"flattenable\" region within a document. When the layout algorithm encounters a group, it will attempt to flatten the group into a single line. If the result does not fit within the page width, the group is rendered without changes. Groups give the layout algorithm flexibility to choose the \"best\" way to display a document, by using the available horizontal space efficiently. The document may contain annotations - values of type T - which can be interpreted by the IDocumentRenderer<T> . This class is intended to be imported under an alias, since typically the type of annotations won't change within your code: using Doc = Gutenberg.Document<MyAnnotation>; . Inheritance Object Document<T> Declaration public abstract class Document<T> : Object Type Parameters Name Description T The type of annotations in the document. Remarks The examples in the documentation for this class are assumed to be preceded by using Doc = Gutenberg.Document<object>; . Properties Empty Represents a Document<T> containing no text. Declaration public static Document<T> Empty { get; } Property Value Type Description Document <T> A Document<T> containing no text. Examples Empty is equivalent to Doc.FromString(\"\") . This means that the document still occupies vertical space: var doc = new Doc[] { \"abc\", Doc.Empty, \"def\" } .Separated(Doc.LineBreak); Console.WriteLine(doc); // Output: // abc // // def HardLineBreak A Document<T> which always creates a line break, even when Grouped() . This document cannot be flattened. You should probably use LineBreak . Declaration public static Document<T> HardLineBreak { get; } Property Value Type Description Document <T> Examples HardLineBreak negates the effect of Grouped() , even when there are other line breaks in the group. var doc = Doc.Concat( \"abc\", Doc.LineBreak, \"def\", Doc.HardLineBreak, \"ghi\" ).Grouped(); Console.WriteLine(doc); // Output: // abc // def // ghi LineBreak A Document<T> which advances to the next line and indents to the current nesting level. When flattened, LineBreak is displayed as a single space. Declaration public static Document<T> LineBreak { get; } Property Value Type Description Document <T> Remarks By default, LineBreak starts a new line. However, if the line break is undone by Grouped() , the line break is rendered as a single space. Examples The default behaviour of LineBreak is to start a new line. var doc = Doc.FromString(\"abc\") .Append(Doc.LineBreak) .Append(\"def\"); Console.WriteLine(doc); // Output: // abc // def When the LineBreak is Grouped() , the layout algorithm tries to compress the line break to a single space. var doc = Doc.FromString(\"abc\") .Append(Doc.LineBreak) .Append(\"def\") .Grouped(); Console.WriteLine(doc); // Output: // abc def When the LineBreak is Grouped() , but the page width is too narrow to fit the text into a single line, the text is broken at the LineBreak . var doc = Doc.FromString(\"abc\") .Append(Doc.LineBreak) .Append(\"def\") .Grouped(); Console.WriteLine(doc.ToString(4)); // Output: // abc // def See Also LineBreakOr(Document<T>) LineBreakHint A \"soft line break\". Behaves like FromString(\" \") if the resulting output fits the page; otherwise, this behaves like LineBreak . Declaration public static Document<T> LineBreakHint { get; } Property Value Type Description Document <T> Examples Console.WriteLine(Doc.Concat(\"abc\", Doc.LineBreakHint, \"def\")); // Output: // abc def var doc = Doc.Concat(\"abc\", Doc.LineBreakHint, \"def\"); Console.WriteLine(doc.ToString(5)); // Output: // abc // def ZeroWidthLineBreak A Document<T> which advances to the next line and indents to the current nesting level. When flattened, ZeroWidthLineBreak behaves like Empty . Declaration public static Document<T> ZeroWidthLineBreak { get; } Property Value Type Description Document <T> Remarks ZeroWidthLineBreak is like LineBreak , except it behaves like Empty if the line break is undone by Grouped() . Examples The default behaviour of ZeroWidthLineBreak is to start a new line. var doc = Doc.FromString(\"abc\") .Append(Doc.ZeroWidthLineBreak) .Append(\"def\"); Console.WriteLine(doc); // Output: // abc // def When the ZeroWidthLineBreak is Grouped() , the layout algorithm tries to compress the line break to nothing. var doc = Doc.FromString(\"abc\") .Append(Doc.ZeroWidthLineBreak) .Append(\"def\") .Grouped(); Console.WriteLine(doc); // Output: // abcdef When the ZeroWidthLineBreak is Grouped() , but the page width is too narrow to fit the text into a single line, the text is broken at the ZeroWidthLineBreak . var doc = Doc.FromString(\"abc\") .Append(Doc.ZeroWidthLineBreak) .Append(\"def\") .Grouped(); Console.WriteLine(doc.ToString(4)); // Output: // abc // def See Also LineBreak LineBreakOr(Document<T>) ZeroWidthLineBreakHint A \"soft line break\". Behaves like Empty if the resulting output fits the page; otherwise, this behaves like LineBreak . Declaration public static Document<T> ZeroWidthLineBreakHint { get; } Property Value Type Description Document <T> Examples Console.WriteLine(Doc.Concat(\"abc\", Doc.ZeroWidthLineBreakHint, \"def\")); // Output: // abcdef var doc = Doc.Concat(\"abc\", Doc.ZeroWidthLineBreakHint, \"def\"); Console.WriteLine(doc.ToString(5)); // Output: // abc // def Methods Aligned() Sets the nesting level of the document to the current column. Declaration public Document<T> Aligned() Returns Type Description Document <T> A Document<T> representing the current document aligned to the current column. Remarks For many purposes, Nested(Int32) is both simpler and more efficient than Aligned() . Examples var doc = Doc.Concat( \"leading text \", new Doc[] { \"first line\", \"second line\", \"third line\" }.Separated(Doc.LineBreak).Aligned() ); Console.WriteLine(doc); // Output: // leading text first line // second line // third line Aligned() sets the nesting level to the current column, but the aligned document may have some further nesting inside it. var doc = Doc.Concat( \"leading text \", Doc.Concat( \"first line\", Doc.LineBreak, \"second line\", Doc.Concat ( Doc.LineBreak, \"nested line 1\", Doc.LineBreak, \"nested line 2\" ).Nested(4), // nested inside aligned Doc.LineBreak, \"last line\" ).Aligned() ); Console.WriteLine(doc); // Output: // leading text first line // second line // nested line 1 // nested line 2 // last line But if an aligned document appears inside a Nested(Int32) document, it overrides the nesting level. var doc = Doc.Concat( \"leading text \", new Doc[] { \"first line\", \"second line\", \"third line\" }.Separated(Doc.LineBreak) .Aligned() // aligned inside nested .Nested(4) ); Console.WriteLine(doc); // Output: // leading text first line // second line // third line Annotated(T) Apply an annotation to the current Document<T> . The annotation will be passed to the IDocumentRenderer<T> . Declaration public Document<T> Annotated(T value) Parameters Type Name Description T value The annotation. Returns Type Description Document <T> A copy of the current Document<T> with an annotation applied. Append(Document<T>) Returns a new Document<T> representing the content of this document concatenated with the content of other . Declaration public Document<T> Append(Document<T> other) Parameters Type Name Description Document <T> other The document to append to this document. Returns Type Description Document <T> A new Document<T> representing the content of this document concatenated with the content of other . Remarks x.Append(y) is equivalent to Document<T>.Concat(x, y) . Examples Console.WriteLine(Doc.FromString(\"abc\").Append(\"def\")); // Output: // abcdef See Also Concat(Document<T>[]) Between(Document<T>, Document<T>) Returns a new Document<T> representing the content of the current document surrounded by the contents of before and after . Declaration public Document<T> Between(Document<T> before, Document<T> after) Parameters Type Name Description Document <T> before The document to place before the current document. Document <T> after The document to place after the current document. Returns Type Description Document <T> A new Document<T> representing the content of the current document surrounded by the contents of before and after . Examples Console.WriteLine(Doc.FromString(\"abc\").Between(\"(\", \")\")); // Output: // (abc) Concat(Document<T>[]) Returns a new Document<T> representing the contents of all of documents concatenated together. Declaration public static Document<T> Concat(params Document<T>[] documents) Parameters Type Name Description Document <T>[] documents The documents to concatenate. Returns Type Description Document <T> A new Document<T> representing the contents of all of documents concatenated together. Examples Console.WriteLine(Doc.Concat(\"abc\", \"def\", \"ghi\")); // Output: // abcdefghi Concat(IEnumerable<Document<T>>) See Concat(Document<T>[]) . Declaration public static Document<T> Concat(IEnumerable<Document<T>> documents) Parameters Type Name Description IEnumerable < Document <T>> documents The documents to concatenate. Returns Type Description Document <T> A new Document<T> representing the contents of all of documents concatenated together. FromBox(Box<T>) Creates a document containing a Box<T> . Declaration public static Document<T> FromBox(Box<T> box) Parameters Type Name Description Box <T> box The Box<T> from which to create the Document<T> . Returns Type Description Document <T> A Document<T> representing the text containted in box . FromString(String) Creates a Document<T> containing the specified text. Any line breaks ( '\\n' characters) in the value will be converted to LineBreak s. Declaration public static Document<T> FromString(string value) Parameters Type Name Description String value The text from which to create the Document<T> . Returns Type Description Document <T> A Document<T> representing the text containted in value . Examples Console.WriteLine(Doc.FromString(\"abc\")); // Output: // abc If the value contains line breaks, they will be converted to LineBreak s. If the Document<T> is Grouped() then the line breaks are liable to be flattened. Console.WriteLine(Doc.FromString(\"abc\\ndef\").Grouped()); // Output: // abc def Grouped() Signals that the current Document<T> is eligible to be flattened. When the layout algorithm encounters a Grouped() region of a document, it attempts to flatten that region by removing any line breaks within it. If the flattened version of the document does not fit within the page width, the original document will be rendered without any changes. Declaration public Document<T> Grouped() Returns Type Description Document <T> A Document<T> representing a flattenable version of the current document. Remarks The appearance of the flattened version of the document depends on the variety of line breaks within it: LineBreak flattens to a single space; ZeroWidthLineBreak flattens to nothing. Examples Here is an example of a document containing LineBreak s, which is rendered on a single line because it has been grouped. var doc = Doc.Concat( \"abc\", Doc.LineBreak, \"def\", Doc.LineBreak, \"ghi\" ).Grouped(); Console.WriteLine(doc); // Output: // abc def ghi Here, the document from the previous example does not fit on a single line due to the narrow page width. The original LineBreak s are rendered unchanged. var doc = Doc.Concat( \"abc\", Doc.LineBreak, \"def\", Doc.LineBreak, \"ghi\" ).Grouped(); Console.WriteLine(doc.ToString(3)); // Output: // abc // def // ghi The group is flattened atomically - either all of the line breaks within the group are flattened or the document is rendered unchanged. In this example, the page is wide enough for the first two line breaks to be flattened, but not the third. However, all three line breaks are rendered as line breaks. var doc = Doc.Concat( \"abc\", Doc.LineBreak, \"def\", Doc.LineBreak, \"ghi\" ).Grouped(); Console.WriteLine(doc.ToString(7)); // Output: // abc // def // ghi Groups may be nested within each other arbitrarily. If a group fits within a line, the entire group will be flattened, including any groups nested within it. var doc = Doc.Concat( Doc.Concat(\"abc\", Doc.LineBreak, \"def\").Grouped(), Doc.LineBreak, Doc.Concat(\"ghi\", Doc.LineBreak, \"jkl\").Grouped() ).Grouped(); Console.WriteLine(doc); // Output: // abc def ghi jkl If a parent group doesn't fit within the page width, the child groups are still eligibe to be flattened. var doc = Doc.Concat( Doc.Concat(\"abc\", Doc.LineBreak, \"def\").Grouped(), Doc.LineBreak, Doc.Concat(\"ghi\", Doc.LineBreak, \"jkl\").Grouped() ).Grouped(); Console.WriteLine(doc.ToString(7)); // Output: // abc def // ghi jkl Hanging(Int32) Sets the nesting level to the current column plus amount . Declaration public Document<T> Hanging(int amount) Parameters Type Name Description Int32 amount The amount of indentation to apply to the document. Returns Type Description Document <T> A Document<T> representing the current document with the specified amount of indentation applied. Remarks doc.Hanging(amt) is equivalent to doc.Nested(amount).Aligned() . Examples var doc = Doc.Concat( \"leading text \", new Doc[] { \"first line\", \"second line\", \"third line\" }.Separated(Doc.LineBreak).Hanging(4) ); Console.WriteLine(doc); // Output: // leading text first line // second line // third line Indented(Int32) Aligns the current document and indents it by indentation , starting at the current column. Declaration public Document<T> Indented(int indentation) Parameters Type Name Description Int32 indentation The amount of indentation to apply to the document. Returns Type Description Document <T> A Document<T> representing the current document with the specified amount of indentation applied. Remarks doc.Indented(amt) is equivalent to Doc.FromString(new string(' ', amt)) + doc.Aligned() . Examples var doc = Doc.Concat( \"leading text \", new Doc[] { \"first line\", \"second line\", \"third line\" }.Separated(Doc.LineBreak).Indented(4) ); Console.WriteLine(doc); // Output: // leading text first line // second line // third line LineBreakHintOr(Document<T>) A \"soft line break\". Behaves like ifFits if the resulting output fits the page; otherwise, this behaves like LineBreak . Declaration public static Document<T> LineBreakHintOr(Document<T> ifFits) Parameters Type Name Description Document <T> ifFits The document to render if there's enough space. Returns Type Description Document <T> A Document<T> which behaves like ifFits if the resulting output fits the page but allows the layout engine to break the line if it doesn't. Examples Console.WriteLine(Doc.Concat(\"abc\", Doc.LineBreakHintOr(\"|\"), \"def\")); // Output: // abc|def var doc = Doc.Concat(\"abc\", Doc.LineBreakHintOr(\"|\"), \"def\"); Console.WriteLine(doc.ToString(5)); // Output: // abc // def LineBreakOr(Document<T>) Creates a Document<T> which advances to the next line and indents to the current nesting level. When flattened, the ifFlattened text is displayed instead. Declaration public static Document<T> LineBreakOr(Document<T> ifFlattened) Parameters Type Name Description Document <T> ifFlattened A Document<T> to render as flattened alternative to a newline, if the document gets flattened. Returns Type Description Document <T> A Document<T> which advances to the next line and indents to the current nesting level. Remarks By default, LineBreakOr(ifFlattened) starts a new line. However, if the line break is undone by Grouped() , the line break is rendered as ifFlattened . Examples The default behaviour of LineBreakOr(Document<T>) is to start a new line. var doc = Doc.FromString(\"abc\") .Append(Doc.LineBreakOr(\"|\")) .Append(\"def\"); Console.WriteLine(doc); // Output: // abc // def When the document is Grouped() , the layout algorithm tries to render the line break as ifFlattened . var doc = Doc.FromString(\"abc\") .Append(Doc.LineBreakOr(\"|\")) .Append(\"def\") .Grouped(); Console.WriteLine(doc); // Output: // abc|def When the LineBreakOr(Document<T>) is Grouped() , but the page width is too narrow to fit the text into a single line, the text is broken at the line break. var doc = Doc.FromString(\"abc\") .Append(Doc.LineBreakOr(\"|\")) .Append(\"def\") .Grouped(); Console.WriteLine(doc.ToString(4)); // Output: // abc // def See Also LineBreak MapAnnotations<U>(Func<T, U>) Apply a function to all the annotations in the current document. Declaration public Document<U> MapAnnotations<U>(Func<T, U> selector) Parameters Type Name Description Func <T, U> selector The function to apply to the annotations. Returns Type Description Document <U> A document with all of the annotations replaced with the return value of selector . Type Parameters Name Description U The type of annotations in the resulting document. Remarks Typically this method is less efficient than MapAnnotations<T, U>(IDocumentRenderer<U>, Func<T, U>) , because this method has to consider all the possible ways the document could be laid out, including layouts which would be discarded. MapAnnotations<U>(Func<T, IEnumerable<U>>) Apply a function to all the annotations in the current document. If the function returns multiple annotations, the annotations are added in a left-to-right fashion. Declaration public Document<U> MapAnnotations<U>(Func<T, IEnumerable<U>> selector) Parameters Type Name Description Func <T, IEnumerable <U>> selector The function to apply to the annotations. Returns Type Description Document <U> A document with all of the annotations replaced with the return values of selector . Type Parameters Name Description U The type of annotations in the resulting document. Nested() Increase the nesting level of the current Document<T> by DefaultNesting . A document's nesting level indicates the amount of indentation which should be applied to line breaks within the document. Declaration public Document<T> Nested() Returns Type Description Document <T> A new Document<T> representing the current document with its nesting level increased by DefaultNesting . Examples var doc = new Doc[] { \"first line\", \"second line\", \"third line\" }.Separated(Doc.LineBreak).Nested(); var options = LayoutOptions.Default with { DefaultNesting = 2 }; Console.WriteLine(doc.ToString(options)); // Output: // first line // second line // third line See Also Nested(Int32) Nested(Int32) Increase the nesting level of the current Document<T> by amount . A document's nesting level indicates the amount of indentation which should be applied to line breaks within the document. Declaration public Document<T> Nested(int amount) Parameters Type Name Description Int32 amount The amount by which to increase the document's nesting level. Returns Type Description Document <T> A new Document<T> representing the current document with its nesting level increased by amount . Remarks An amount of 0 is equivalent to not nesting the document at all. Examples A nested document is not \"immediately\" indented. Rather, the given amount of nesting is applied to any line breaks within the document. If you nest a document which has some text on its first line, that text is displayed unaltered. The following lines in the document will have the nesting applied to them. var doc = new Doc[] { \"first line\", \"second line\", \"third line\" }.Separated(Doc.LineBreak).Nested(4); Console.WriteLine(doc); // Output: // first line // second line // third line This also applies when there is already text on the current line: var doc = Doc.Concat( \"leading text \", new Doc[] { \"first line\", \"second line\", \"third line\" }.Separated(Doc.LineBreak).Nested(4) ); Console.WriteLine(doc); // Output: // leading text first line // second line // third line See Also Nested() Reflow(String) Inserts LineBreakHint s between words, so that the text is broken into multiple lines when it is too wide for the page. Declaration public static Document<T> Reflow(string text) Parameters Type Name Description String text The text to reflow. Returns Type Description Document <T> A Document<T> with the text reflowed. Render(IDocumentRenderer<T>, CancellationToken) Lay out the Document<T> , using the default LayoutOptions , and write its text to the renderer . Declaration public ValueTask Render(IDocumentRenderer<T> renderer, CancellationToken cancellationToken = null) Parameters Type Name Description IDocumentRenderer <T> renderer The IDocumentRenderer<T> . CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when all of the Document<T> 's text has been written to the renderer . Render(LayoutOptions, IDocumentRenderer<T>, CancellationToken) Lay out the Document<T> and write its text to the renderer . Declaration public ValueTask Render(LayoutOptions options, IDocumentRenderer<T> renderer, CancellationToken cancellationToken = null) Parameters Type Name Description LayoutOptions options Options for rendering the document. IDocumentRenderer <T> renderer The IDocumentRenderer<T> . CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when all of the Document<T> 's text has been written to the renderer . Render(Int32, IDocumentRenderer<T>, CancellationToken) Lay out the Document<T> , with the given pageWidth , and write its text to the renderer . Declaration public ValueTask Render(int pageWidth, IDocumentRenderer<T> renderer, CancellationToken cancellationToken = null) Parameters Type Name Description Int32 pageWidth The page width. IDocumentRenderer <T> renderer The IDocumentRenderer<T> . CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when all of the Document<T> 's text has been written to the renderer . Select<U>(Func<T, U>) Apply a function to all the annotations in the current document. Declaration public Document<U> Select<U>(Func<T, U> selector) Parameters Type Name Description Func <T, U> selector The function to apply to the annotations. Returns Type Description Document <U> A document with all of the annotations replaced with the return value of selector . Type Parameters Name Description U The type of annotations in the resulting document. Remarks Typically this method is less efficient than MapAnnotations<T, U>(IDocumentRenderer<U>, Func<T, U>) , because this method has to consider all the possible ways the document could be laid out, including layouts which would be discarded. ToString() Lay out the Document<T> , using the default LayoutOptions , and render it as a string. Declaration public override string ToString() Returns Type Description String A string representation of the document. ToString(LayoutOptions) Lay out the Document<T> and render it as a string. Declaration public string ToString(LayoutOptions options) Parameters Type Name Description LayoutOptions options The LayoutOptions . Returns Type Description String A string representation of the document. ToString(Int32) Lay out the Document<T> , with the given pageWidth , and render it as a string. Declaration public string ToString(int pageWidth) Parameters Type Name Description Int32 pageWidth The page width. Returns Type Description String A string representation of the document. UnsafeFromString(String) Creates a Document<T> containing the specified text. The value MUST NOT contain newline characters. This precondition is not checked. It is your responsibility to ensure that there are no '\\n' s in the input. You should probably use FromString(String) instead. Declaration public static Document<T> UnsafeFromString(string value) Parameters Type Name Description String value The text from which to create the Document<T> . This value MUST NOT contain line breaks. Returns Type Description Document <T> A Document<T> representing the text containted in value . See Also FromString(String) Write(LayoutOptions, TextWriter, CancellationToken) Lay out the Document<T> and write it into a TextWriter . Declaration public ValueTask Write(LayoutOptions options, TextWriter writer, CancellationToken cancellationToken = null) Parameters Type Name Description LayoutOptions options The LayoutOptions . TextWriter writer The TextWriter . CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when all of the Document<T> 's text has been written to the writer . Write(TextWriter, CancellationToken) Lay out the Document<T> and write it into a TextWriter . Declaration public ValueTask Write(TextWriter writer, CancellationToken cancellationToken = null) Parameters Type Name Description TextWriter writer The TextWriter . CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when all of the Document<T> 's text has been written to the writer . Operators Addition(Document<T>, Document<T>) Returns a new Document<T> representing the content of left concatenated with the content of right . Declaration public static Document<T> operator +(Document<T> left, Document<T> right) Parameters Type Name Description Document <T> left The document to append right to. Document <T> right The document to append to left . Returns Type Description Document <T> A new Document<T> representing the content of left concatenated with the content of right . Remarks x + y is equivalent to x.Append(y) . Examples Console.WriteLine(Doc.FromString(\"abc\") + Doc.FromString(\"def\")); // Output: // abcdef See Also Append(Document<T>) Implicit(Box<T> to Document<T>) Implicitly convert a Box<T> to a Document<T> . Declaration public static implicit operator Document<T>(Box<T> value) Parameters Type Name Description Box <T> value The Box<T> from which to create the Document<T> . Returns Type Description Document <T> A Document<T> representing the text containted in value . Remarks This conversion is equivalent to FromBox(Box<T>) . Implicit(String to Document<T>) Implicitly convert a String to a Document<T> . Declaration public static implicit operator Document<T>(string value) Parameters Type Name Description String value The text from which to create the Document<T> . Returns Type Description Document <T> A Document<T> representing the text containted in value . Remarks This conversion is equivalent to FromString(String) . Examples This conversion is especially useful when used with methods which accept a Document<T> , such as Concat(Document<T>[]) . Console.WriteLine(Doc.Concat(\"abc\", \"def\")); // Output: // abcdef"
  },
  "Gutenberg.DocumentExtensions.html": {
    "href": "Gutenberg.DocumentExtensions.html",
    "title": "Class DocumentExtensions | Gutenberg",
    "keywords": "Class DocumentExtensions Contains extension methods for Document<T> . Inheritance Object DocumentExtensions Declaration public static class DocumentExtensions : Object Methods Separated<T>(IEnumerable<Document<T>>, Document<T>) Returns a Document<T> representing the items in documents concatenated together, with separator in between them. Declaration public static Document<T> Separated<T>(this IEnumerable<Document<T>> documents, Document<T> separator) Parameters Type Name Description IEnumerable < Document <T>> documents The documents to concatenate. Document <T> separator The document to place between each document. Returns Type Description Document <T> A Document<T> representing the items in documents concatenated together, with separator in between them. Type Parameters Name Description T The type of annotations in the document. Examples var doc = new Doc[] { \"item1\", \"item2\", \"item3\" } .Separated(\",\"); Console.WriteLine(doc); // Output: // item1,item2,item3 SeparatedAndTerminated<T>(IEnumerable<Document<T>>, Document<T>) Returns a Document<T> representing the items in documents concatenated together, with separator after each one. Declaration public static Document<T> SeparatedAndTerminated<T>(this IEnumerable<Document<T>> documents, Document<T> separator) Parameters Type Name Description IEnumerable < Document <T>> documents The documents to concatenate. Document <T> separator The document to place after each document. Returns Type Description Document <T> A Document<T> representing the items in documents concatenated together, with separator after each one. Type Parameters Name Description T The type of annotations in the document. Remarks docs.SeparatedAndTerminated(sep) is equivalent to documents.Separated(separator).Append(separator) . Examples var doc = new Doc[] { \"item1\", \"item2\", \"item3\" } .SeparatedAndTerminated(\",\"); Console.WriteLine(doc); // Output: // item1,item2,item3,"
  },
  "Gutenberg.Expression.BinaryOperator-1.html": {
    "href": "Gutenberg.Expression.BinaryOperator-1.html",
    "title": "Class BinaryOperator<T> | Gutenberg",
    "keywords": "Class BinaryOperator<T> Represents a binary (infix) operator with a given precedence. Inheritance Object BinaryOperator<T> Declaration public sealed class BinaryOperator<T> : Object Type Parameters Name Description T The type of annotations in the document. Methods Apply(Expression<T>, Expression<T>) Creates an Expression<T> representing this operator placed between the left and right expressions. Declaration public Expression<T> Apply(Expression<T> left, Expression<T> right) Parameters Type Name Description Expression <T> left The left-hand argument of the operator. Expression <T> right The right-hand argument of the operator. Returns Type Description Expression <T> An Expression<T> representing this operator placed between the left and right expressions. See Also OperatorFactory <T> UnaryOperator <T>"
  },
  "Gutenberg.Expression.BinaryOperatorType.html": {
    "href": "Gutenberg.Expression.BinaryOperatorType.html",
    "title": "Class BinaryOperatorType | Gutenberg",
    "keywords": "Class BinaryOperatorType The associativity of the BinaryOperator<T> : left-associative, right-associative, or non-associative. Inheritance Object BinaryOperatorType Declaration public sealed class BinaryOperatorType : Enum Fields LeftAssociative Denotes a left-associative binary operator Declaration public const BinaryOperatorType LeftAssociative Field Value Type Description BinaryOperatorType NonAssociative Denotes a non-associative binary operator Declaration public const BinaryOperatorType NonAssociative Field Value Type Description BinaryOperatorType RightAssociative Denotes a right-associative binary operator Declaration public const BinaryOperatorType RightAssociative Field Value Type Description BinaryOperatorType value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "Gutenberg.Expression.Expression-1.html": {
    "href": "Gutenberg.Expression.Expression-1.html",
    "title": "Class Expression<T> | Gutenberg",
    "keywords": "Class Expression<T> Represents an expression composed of operators applied to Document<T> s. You can use Expression<T> to pretty-print code in an expression-based language with operators and precedence. Expression<T> will automatically insert parentheses into the resulting document to create an unambiguous display. To get started, use the OperatorFactory<T> to create objects representing each of the operators in your language. Then those operators can be applied to . Document<T> s and other expressions to create complex expressions. Finally, when you PrettyPrint() the expression, it will return a Document<T> with parentheses inserted in the correct locations. Inheritance Object Expression<T> Implements IPrettyPrintable <T> Declaration public abstract class Expression<T> : Object, IPrettyPrintable<T> Type Parameters Name Description T The type of annotations in the Document<T> s. Examples Here is an example of a small expression language with negation, addition, and equality operators. Since ! binds tighter (has a higher precedence) than == , the example document pretty-prints itself with parentheses around the equality expression. var not = OperatorFactory<object>.Prefix(7, \"!\"); var plus = OperatorFactory<object>.InfixL(5, \" + \"); var eq = OperatorFactory<object>.InfixL(3, \" == \"); var doc = not.Apply(eq.Apply(plus.Apply(\"x\", \"y\"), \"z\")); Console.WriteLine(doc.PrettyPrint()); // Output: // !(x + y == z) Constructors Expression() Declaration protected Expression() Methods FromDocument(Document<T>) Creates a leaf-level Expression<T> from the given document . Declaration public static Expression<T> FromDocument(Document<T> document) Parameters Type Name Description Document <T> document The document. Returns Type Description Expression <T> An expression representing the document . FromString(String) Creates a leaf-level Expression<T> from the given string. Declaration public static Expression<T> FromString(string text) Parameters Type Name Description String text The document. Returns Type Description Expression <T> An expression representing the text . Remarks Expr.FromString(x) is equivalent to Expr.FromDocument(Doc.FromString(x)) . See Also FromDocument(Document<T>) PrettyPrint() Render the current object as a Document<T> . Declaration public Document<T> PrettyPrint() Returns Type Description Document <T> A Document<T> containing a textual representation of the current object. Operators Implicit(Document<T> to Expression<T>) Implicitly converts a Document<T> to an Expression<T> . Declaration public static implicit operator Expression<T>(Document<T> document) Parameters Type Name Description Document <T> document The document. Returns Type Description Expression <T> An expression representing the document . Remarks This conversion is equivalent to FromDocument(Document<T>) . See Also FromDocument(Document<T>) Implicit(String to Expression<T>) Implicitly converts a string to an Expression<T> . Declaration public static implicit operator Expression<T>(string text) Parameters Type Name Description String text The text. Returns Type Description Expression <T> An expression representing the text . Remarks This conversion is equivalent to FromString(String) . See Also FromString(String) Implements IPrettyPrintable<T>"
  },
  "Gutenberg.Expression.html": {
    "href": "Gutenberg.Expression.html",
    "title": "Namespace Gutenberg.Expression | Gutenberg",
    "keywords": "Namespace Gutenberg.Expression Classes BinaryOperator<T> Represents a binary (infix) operator with a given precedence. BinaryOperatorType The associativity of the BinaryOperator<T> : left-associative, right-associative, or non-associative. Expression<T> Represents an expression composed of operators applied to Document<T> s. You can use Expression<T> to pretty-print code in an expression-based language with operators and precedence. Expression<T> will automatically insert parentheses into the resulting document to create an unambiguous display. To get started, use the OperatorFactory<T> to create objects representing each of the operators in your language. Then those operators can be applied to . Document<T> s and other expressions to create complex expressions. Finally, when you PrettyPrint() the expression, it will return a Document<T> with parentheses inserted in the correct locations. OperatorFactory<T> Methods to create UnaryOperator<T> and BinaryOperator<T> values. UnaryOperator<T> Represents a unary (prefix or postfix) operator with a given precedence. UnaryOperatorType The type of the UnaryOperator<T> : prefix or postfix."
  },
  "Gutenberg.Expression.OperatorFactory-1.html": {
    "href": "Gutenberg.Expression.OperatorFactory-1.html",
    "title": "Class OperatorFactory<T> | Gutenberg",
    "keywords": "Class OperatorFactory<T> Methods to create UnaryOperator<T> and BinaryOperator<T> values. Inheritance Object OperatorFactory<T> Declaration public static class OperatorFactory<T> : Object Type Parameters Name Description T The type of annotations in the document. Methods Infix(BinaryOperatorType, Int32, Document<T>) Creates a BinaryOperator<T> representing the given symbol , with the given type and precedence . When the expression needs to be surrounded by parentheses, the K&R style is used. Declaration public static BinaryOperator<T> Infix(BinaryOperatorType type, int precedence, Document<T> symbol) Parameters Type Name Description BinaryOperatorType type The type of the BinaryOperator<T> . Int32 precedence The precedence of the BinaryOperator<T> . Document <T> symbol How to display the BinaryOperator<T> . Returns Type Description BinaryOperator <T> A BinaryOperator<T> . See Also KernighanRitchieBracketer <T> Infix(BinaryOperatorType, Int32, Document<T>, IBracketer<T>) Creates a BinaryOperator<T> representing the given symbol , with the given type and precedence . When the expression needs to be surrounded by parentheses, bracketer is used. Declaration public static BinaryOperator<T> Infix(BinaryOperatorType type, int precedence, Document<T> symbol, IBracketer<T> bracketer) Parameters Type Name Description BinaryOperatorType type The type of the BinaryOperator<T> . Int32 precedence The precedence of the BinaryOperator<T> . Document <T> symbol How to display the BinaryOperator<T> . IBracketer <T> bracketer An IBracketer<T> which will be called when the operator needs to be parenthesised. Returns Type Description BinaryOperator <T> A BinaryOperator<T> . InfixL(Int32, Document<T>) Creates a left-associative BinaryOperator<T> representing the given symbol , with the given precedence . When the expression needs to be surrounded by parentheses, the K&R style is used. Declaration public static BinaryOperator<T> InfixL(int precedence, Document<T> symbol) Parameters Type Name Description Int32 precedence The precedence of the BinaryOperator<T> . Document <T> symbol How to display the BinaryOperator<T> . Returns Type Description BinaryOperator <T> A left-associative BinaryOperator<T> . See Also KernighanRitchieBracketer <T> InfixL(Int32, Document<T>, IBracketer<T>) Creates a left-associative BinaryOperator<T> representing the given symbol , with the given precedence . When the expression needs to be surrounded by parentheses, bracketer is used. Declaration public static BinaryOperator<T> InfixL(int precedence, Document<T> symbol, IBracketer<T> bracketer) Parameters Type Name Description Int32 precedence The precedence of the BinaryOperator<T> . Document <T> symbol How to display the BinaryOperator<T> . IBracketer <T> bracketer An IBracketer<T> which will be called when the operator needs to be parenthesised. Returns Type Description BinaryOperator <T> A left-associative BinaryOperator<T> . InfixN(Int32, Document<T>) Creates a non-associative BinaryOperator<T> representing the given symbol , with the given precedence . When the expression needs to be surrounded by parentheses, the K&R style is used. Declaration public static BinaryOperator<T> InfixN(int precedence, Document<T> symbol) Parameters Type Name Description Int32 precedence The precedence of the BinaryOperator<T> . Document <T> symbol How to display the BinaryOperator<T> . Returns Type Description BinaryOperator <T> A non-associative BinaryOperator<T> . See Also KernighanRitchieBracketer <T> InfixN(Int32, Document<T>, IBracketer<T>) Creates a non-associative BinaryOperator<T> representing the given symbol , with the given precedence . When the expression needs to be surrounded by parentheses, bracketer is used. Declaration public static BinaryOperator<T> InfixN(int precedence, Document<T> symbol, IBracketer<T> bracketer) Parameters Type Name Description Int32 precedence The precedence of the BinaryOperator<T> . Document <T> symbol How to display the BinaryOperator<T> . IBracketer <T> bracketer An IBracketer<T> which will be called when the operator needs to be parenthesised. Returns Type Description BinaryOperator <T> A non-associative BinaryOperator<T> . InfixR(Int32, Document<T>) Creates a right-associative BinaryOperator<T> representing the given symbol , with the given precedence . When the expression needs to be surrounded by parentheses, the K&R style is used. Declaration public static BinaryOperator<T> InfixR(int precedence, Document<T> symbol) Parameters Type Name Description Int32 precedence The precedence of the BinaryOperator<T> . Document <T> symbol How to display the BinaryOperator<T> . Returns Type Description BinaryOperator <T> A right-associative BinaryOperator<T> . See Also KernighanRitchieBracketer <T> InfixR(Int32, Document<T>, IBracketer<T>) Creates a right-associative BinaryOperator<T> representing the given symbol , with the given precedence . When the expression needs to be surrounded by parentheses, bracketer is used. Declaration public static BinaryOperator<T> InfixR(int precedence, Document<T> symbol, IBracketer<T> bracketer) Parameters Type Name Description Int32 precedence The precedence of the BinaryOperator<T> . Document <T> symbol How to display the BinaryOperator<T> . IBracketer <T> bracketer An IBracketer<T> which will be called when the operator needs to be parenthesised. Returns Type Description BinaryOperator <T> A right-associative BinaryOperator<T> . Postfix(Int32, Document<T>, Boolean) Creates a postfix UnaryOperator<T> representing the given symbol , with the given precedence . When the expression needs to be surrounded by parentheses, the K&R style is used. Declaration public static UnaryOperator<T> Postfix(int precedence, Document<T> symbol, bool chainable = false) Parameters Type Name Description Int32 precedence The precedence of the UnaryOperator<T> . Document <T> symbol How to display the UnaryOperator<T> . Boolean chainable Whether the operator is chainable. If a non-chainable operator is applied multiple times, the inner expressions are parenthesised. Returns Type Description UnaryOperator <T> A postfix UnaryOperator<T> . See Also KernighanRitchieBracketer <T> Postfix(Int32, Document<T>, Boolean, IBracketer<T>) Creates a postfix UnaryOperator<T> representing the given symbol , with the given precedence . When the expression needs to be surrounded by parentheses, bracketer is used. Declaration public static UnaryOperator<T> Postfix(int precedence, Document<T> symbol, bool chainable, IBracketer<T> bracketer) Parameters Type Name Description Int32 precedence The precedence of the UnaryOperator<T> . Document <T> symbol How to display the UnaryOperator<T> . Boolean chainable Whether the operator is chainable. If a non-chainable operator is applied multiple times, the inner expressions are parenthesised. IBracketer <T> bracketer An IBracketer<T> which will be called when the operator needs to be parenthesised. Returns Type Description UnaryOperator <T> A postfix UnaryOperator<T> . Prefix(Int32, Document<T>, Boolean) Creates a prefix UnaryOperator<T> representing the given symbol , with the given precedence . When the expression needs to be surrounded by parentheses, the K&R style is used. Declaration public static UnaryOperator<T> Prefix(int precedence, Document<T> symbol, bool chainable = false) Parameters Type Name Description Int32 precedence The precedence of the UnaryOperator<T> . Document <T> symbol How to display the UnaryOperator<T> . Boolean chainable Whether the operator is chainable. If a non-chainable operator is applied multiple times, the inner expressions are parenthesised. Returns Type Description UnaryOperator <T> A prefix UnaryOperator<T> . See Also KernighanRitchieBracketer <T> Prefix(Int32, Document<T>, Boolean, IBracketer<T>) Creates a prefix UnaryOperator<T> representing the given symbol , with the given precedence . When the expression needs to be surrounded by parentheses, bracketer is used. Declaration public static UnaryOperator<T> Prefix(int precedence, Document<T> symbol, bool chainable, IBracketer<T> bracketer) Parameters Type Name Description Int32 precedence The precedence of the UnaryOperator<T> . Document <T> symbol How to display the UnaryOperator<T> . Boolean chainable Whether the operator is chainable. If a non-chainable operator is applied multiple times, the inner expressions are parenthesised. IBracketer <T> bracketer An IBracketer<T> which will be called when the operator needs to be parenthesised. Returns Type Description UnaryOperator <T> A prefix UnaryOperator<T> . Unary(UnaryOperatorType, Int32, Document<T>, Boolean) Creates a UnaryOperator<T> representing the given symbol , with the given type and precedence . When the expression needs to be surrounded by parentheses, the K&R style is used. Declaration public static UnaryOperator<T> Unary(UnaryOperatorType type, int precedence, Document<T> symbol, bool chainable = false) Parameters Type Name Description UnaryOperatorType type The type of the UnaryOperator<T> . Int32 precedence The precedence of the UnaryOperator<T> . Document <T> symbol How to display the UnaryOperator<T> . Boolean chainable Whether the operator is chainable. If a non-chainable operator is applied multiple times, the inner expressions are parenthesised. Returns Type Description UnaryOperator <T> A UnaryOperator<T> . See Also KernighanRitchieBracketer <T> Unary(UnaryOperatorType, Int32, Document<T>, Boolean, IBracketer<T>) Creates a UnaryOperator<T> representing the given symbol , with the given type and precedence .When the expression needs to be surrounded by parentheses, bracketer is used. Declaration public static UnaryOperator<T> Unary(UnaryOperatorType type, int precedence, Document<T> symbol, bool chainable, IBracketer<T> bracketer) Parameters Type Name Description UnaryOperatorType type The type of the UnaryOperator<T> . Int32 precedence The precedence of the UnaryOperator<T> . Document <T> symbol How to display the UnaryOperator<T> . Boolean chainable Whether the operator is chainable. If a non-chainable operator is applied multiple times, the inner expressions are parenthesised. IBracketer <T> bracketer An IBracketer<T> which will be called when the operator needs to be parenthesised. Returns Type Description UnaryOperator <T> A UnaryOperator<T> ."
  },
  "Gutenberg.Expression.UnaryOperator-1.html": {
    "href": "Gutenberg.Expression.UnaryOperator-1.html",
    "title": "Class UnaryOperator<T> | Gutenberg",
    "keywords": "Class UnaryOperator<T> Represents a unary (prefix or postfix) operator with a given precedence. Inheritance Object UnaryOperator<T> Declaration public sealed class UnaryOperator<T> : Object Type Parameters Name Description T The type of annotations in the docuemnt. Methods Apply(Expression<T>) Creates an Expression<T> representing this operator applied to the expression . Declaration public Expression<T> Apply(Expression<T> expression) Parameters Type Name Description Expression <T> expression The expression to apply this operator to. Returns Type Description Expression <T> An Expression<T> representing this operator applied to the expression . See Also OperatorFactory <T> BinaryOperator <T>"
  },
  "Gutenberg.Expression.UnaryOperatorType.html": {
    "href": "Gutenberg.Expression.UnaryOperatorType.html",
    "title": "Class UnaryOperatorType | Gutenberg",
    "keywords": "Class UnaryOperatorType The type of the UnaryOperator<T> : prefix or postfix. Inheritance Object UnaryOperatorType Declaration public sealed class UnaryOperatorType : Enum Fields Postfix Denotes a postfix operator Declaration public const UnaryOperatorType Postfix Field Value Type Description UnaryOperatorType Prefix Denotes a prefix operator Declaration public const UnaryOperatorType Prefix Field Value Type Description UnaryOperatorType value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "Gutenberg.html": {
    "href": "Gutenberg.html",
    "title": "Namespace Gutenberg | Gutenberg",
    "keywords": "Namespace Gutenberg Classes Alignment How to behave when composing two Box<T> es with mismatched sizes. Box<T> Represents an immutable two-dimensional rectangular box of text. The box can be rendered by an IDocumentRenderer<T> or laid out as part of a Document<T> . Document<T> Represents an immutable textual document which can be laid out in a variety of ways. Once laid out, the document can be rendered by an IDocumentRenderer<T> . A Document<T> 's layout is determined by the available page width, the locations of line breaks within the document, and the locations of groups within the document. The page has a certain maximum width (determined by PageWidth ), which the layout algorithm tries not to exceed, by inserting line breaks where possible. The possible line breaks are indicated by the presence of LineBreak values within the document. A document may contain groups, introduced by the Grouped() method. A group indicates a \"flattenable\" region within a document. When the layout algorithm encounters a group, it will attempt to flatten the group into a single line. If the result does not fit within the page width, the group is rendered without changes. Groups give the layout algorithm flexibility to choose the \"best\" way to display a document, by using the available horizontal space efficiently. The document may contain annotations - values of type T - which can be interpreted by the IDocumentRenderer<T> . This class is intended to be imported under an alias, since typically the type of annotations won't change within your code: using Doc = Gutenberg.Document<MyAnnotation>; . DocumentExtensions Contains extension methods for Document<T> . LayoutMode The layout mode. LayoutOptions Options for laying out a Document<T> . PageWidthOptions Information about the available width for layout Interfaces IDocumentRenderer<T> An interface for objects which know how to render a Document<T> . IPrettyPrintable<T> An interface for objects which can render themselves as a Document<T> ."
  },
  "Gutenberg.IDocumentRenderer-1.html": {
    "href": "Gutenberg.IDocumentRenderer-1.html",
    "title": "Interface IDocumentRenderer<T> | Gutenberg",
    "keywords": "Interface IDocumentRenderer<T> An interface for objects which know how to render a Document<T> . Declaration public interface IDocumentRenderer<in T> Type Parameters Name Description T The type of annotations in the document. Methods NewLine(CancellationToken) Write a line break into the output stream. Declaration ValueTask NewLine(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the line break has been written to the output stream. PopAnnotation(CancellationToken) Discard the value of a previous call to PushAnnotation(T, CancellationToken) . Declaration ValueTask PopAnnotation(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the value has been popped from the stack. PushAnnotation(T, CancellationToken) Accept an annotation. Declaration ValueTask PushAnnotation(T value, CancellationToken cancellationToken = null) Parameters Type Name Description T value The annotation to push onto the stack. CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the value has been pushed onto the stack. Text(ReadOnlyMemory<Char>, CancellationToken) Write some text into the output stream. Declaration ValueTask Text(ReadOnlyMemory<char> memory, CancellationToken cancellationToken = null) Parameters Type Name Description ReadOnlyMemory < Char > memory The text to write to the output stream. CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the text has been written to the output stream. WhiteSpace(Int32, CancellationToken) Write the given amount of blank space into the output stream. Declaration ValueTask WhiteSpace(int amount, CancellationToken cancellationToken = null) Parameters Type Name Description Int32 amount The amount of white space to write. CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the white space has been written to the output stream. Extension Methods DocumentRendererExtensions.MapAnnotations<T, U>(IDocumentRenderer<U>, Func<T, U>) DocumentRendererExtensions.MapAnnotations<T, U>(IDocumentRenderer<U>, Func<T, ValueTask<U>>)"
  },
  "Gutenberg.IPrettyPrintable-1.html": {
    "href": "Gutenberg.IPrettyPrintable-1.html",
    "title": "Interface IPrettyPrintable<T> | Gutenberg",
    "keywords": "Interface IPrettyPrintable<T> An interface for objects which can render themselves as a Document<T> . Declaration public interface IPrettyPrintable<T> Type Parameters Name Description T The type of annotations in the resulting Document<T> . Methods PrettyPrint() Render the current object as a Document<T> . Declaration Document<T> PrettyPrint() Returns Type Description Document <T> A Document<T> containing a textual representation of the current object."
  },
  "Gutenberg.LayoutMode.html": {
    "href": "Gutenberg.LayoutMode.html",
    "title": "Class LayoutMode | Gutenberg",
    "keywords": "Class LayoutMode The layout mode. Inheritance Object LayoutMode Declaration public sealed class LayoutMode : Enum Fields Default The default layout mode, with one line of lookahead Declaration public const LayoutMode Default Field Value Type Description LayoutMode Simple A fast-and-ugly layout mode. Tells the layout engine not to collapse any line breaks and to ignore all indentation and annotations. The resulting text contains fewer characters than the Default mode, so may be appropriate for machine-readable output in indentation-insensitive contexts. Declaration public const LayoutMode Simple Field Value Type Description LayoutMode Examples var doc = Doc.Concat( \"abc\", Doc.LineBreak, Doc.Concat(\"def\", Doc.LineBreak, \"ghi\").Nested() ); var options = LayoutOptions.Default with { LayoutMode = LayoutMode.Simple }; Console.WriteLine(doc.ToString(options)); // Output: // abc // def // ghi Smart A \"smart\" layout mode, which can produce better layouts than Default under certain circumstances, at the expense of some performance. The Default layout mode commits to rendering a Document<T> in a certain way if the rest of the current line fits within the page width. In other words, the Default layout mode has up to one line of lookahead. However, this lookahead strategy can sometimes produce inefficient layouts when rendering Aligned() blocks. If the first line of an aligned block fits within the page width, the default layout mode commits to rendering the whole aligned block indented to the current column, even if that would cause a line later on in the block to overflow. The Smart layout mode instructs the layout engine to look ahead further than a single line when rendering an aligned block; instead it looks ahead to the first de-indent. This means the smart layout algorithm might take a LineBreakHint s preceding an aligned block, if doing so would prevent a line in the aligned block from overflowing. Declaration public const LayoutMode Smart Field Value Type Description LayoutMode Remarks This layout mode generally performs worse (more backtracking) than the default layout mode, but can produce better layouts for documents featuring Aligned() blocks. Examples In this example, the second line of the aligned block causes an overflow in the Default layout mode. However, Smart layout mode decides to take the line break hint on the first line in order to prevent the overflow. var doc = Doc.LineBreakHint + new Doc[] { \"aligned block\", \"containing a long line after the first\" } .Separated(Doc.LineBreak) .Aligned(); var defaultOptions = LayoutOptions.Default with { PageWidth = new(50) }; Console.WriteLine((\"Default layout mode:\" + doc).ToString(defaultOptions)); Console.WriteLine(); var smartOptions = defaultOptions with { LayoutMode = LayoutMode.Smart }; Console.WriteLine((\"Smart layout mode:\" + doc).ToString(smartOptions)); // Output: // Default layout mode: aligned block // containing a long line after the first // // Smart layout mode: // aligned block // containing a long line after the first value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "Gutenberg.LayoutOptions.html": {
    "href": "Gutenberg.LayoutOptions.html",
    "title": "Class LayoutOptions | Gutenberg",
    "keywords": "Class LayoutOptions Options for laying out a Document<T> . Inheritance Object LayoutOptions Implements IEquatable < LayoutOptions > Declaration public class LayoutOptions : Object Constructors LayoutOptions(LayoutOptions) Declaration protected LayoutOptions(LayoutOptions original) Parameters Type Name Description LayoutOptions original LayoutOptions(PageWidthOptions, LayoutMode, Int32, Boolean) Options for laying out a Document<T> . Declaration public LayoutOptions(PageWidthOptions PageWidth, LayoutMode LayoutMode, int DefaultNesting, bool StripTrailingWhitespace) Parameters Type Name Description PageWidthOptions PageWidth The configured page width. Null for unlimited page width LayoutMode LayoutMode The layout mode Int32 DefaultNesting The default indentation level for calls to Nested() Boolean StripTrailingWhitespace Whether to strip whitespace from the end of each line Properties Default The default LayoutOptions . Declaration public static LayoutOptions Default { get; } Property Value Type Description LayoutOptions DefaultNesting The default indentation level for calls to Nested() Declaration public int DefaultNesting { get; set; } Property Value Type Description Int32 EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type LayoutMode The layout mode Declaration public LayoutMode LayoutMode { get; set; } Property Value Type Description LayoutMode PageWidth The configured page width. Null for unlimited page width Declaration public PageWidthOptions PageWidth { get; set; } Property Value Type Description PageWidthOptions StripTrailingWhitespace Whether to strip whitespace from the end of each line Declaration public bool StripTrailingWhitespace { get; set; } Property Value Type Description Boolean Methods <Clone>$() Declaration public virtual LayoutOptions <Clone>$() Returns Type Description LayoutOptions Deconstruct(out PageWidthOptions, out LayoutMode, out Int32, out Boolean) Declaration public void Deconstruct(out PageWidthOptions PageWidth, out LayoutMode LayoutMode, out int DefaultNesting, out bool StripTrailingWhitespace) Parameters Type Name Description PageWidthOptions PageWidth LayoutMode LayoutMode Int32 DefaultNesting Boolean StripTrailingWhitespace Equals(LayoutOptions) Declaration public virtual bool Equals(LayoutOptions other) Parameters Type Name Description LayoutOptions other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(LayoutOptions, LayoutOptions) Declaration public static bool operator ==(LayoutOptions left, LayoutOptions right) Parameters Type Name Description LayoutOptions left LayoutOptions right Returns Type Description Boolean Inequality(LayoutOptions, LayoutOptions) Declaration public static bool operator !=(LayoutOptions left, LayoutOptions right) Parameters Type Name Description LayoutOptions left LayoutOptions right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "Gutenberg.PageWidthOptions.html": {
    "href": "Gutenberg.PageWidthOptions.html",
    "title": "Class PageWidthOptions | Gutenberg",
    "keywords": "Class PageWidthOptions Information about the available width for layout Inheritance Object PageWidthOptions Implements IEquatable < PageWidthOptions > Declaration public class PageWidthOptions : Object Constructors PageWidthOptions(PageWidthOptions) Declaration protected PageWidthOptions(PageWidthOptions original) Parameters Type Name Description PageWidthOptions original PageWidthOptions(Int32, Double) Information about the available width for layout Declaration public PageWidthOptions(int PageWidth = 80, double PrintableRatio = 1) Parameters Type Name Description Int32 PageWidth The total width of the page in characters Double PrintableRatio The percentage of the total page width that can have printed (non-indentation) characters on it. Also known as the ribbon width. Properties EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type PageWidth The total width of the page in characters Declaration public int PageWidth { get; set; } Property Value Type Description Int32 PrintableRatio The percentage of the total page width that can have printed (non-indentation) characters on it. Also known as the ribbon width. Declaration public double PrintableRatio { get; set; } Property Value Type Description Double Methods <Clone>$() Declaration public virtual PageWidthOptions <Clone>$() Returns Type Description PageWidthOptions Deconstruct(out Int32, out Double) Declaration public void Deconstruct(out int PageWidth, out double PrintableRatio) Parameters Type Name Description Int32 PageWidth Double PrintableRatio Equals(PageWidthOptions) Declaration public virtual bool Equals(PageWidthOptions other) Parameters Type Name Description PageWidthOptions other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(PageWidthOptions, PageWidthOptions) Declaration public static bool operator ==(PageWidthOptions left, PageWidthOptions right) Parameters Type Name Description PageWidthOptions left PageWidthOptions right Returns Type Description Boolean Inequality(PageWidthOptions, PageWidthOptions) Declaration public static bool operator !=(PageWidthOptions left, PageWidthOptions right) Parameters Type Name Description PageWidthOptions left PageWidthOptions right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "Gutenberg.Rendering.ConsoleDocumentRenderer.html": {
    "href": "Gutenberg.Rendering.ConsoleDocumentRenderer.html",
    "title": "Class ConsoleDocumentRenderer | Gutenberg",
    "keywords": "Class ConsoleDocumentRenderer An IDocumentRenderer<T> which writes formatted text to the Console . Inheritance Object ConsoleDocumentRenderer Implements IDocumentRenderer < ConsoleFormattingAnnotation > Declaration public class ConsoleDocumentRenderer : Object, IDocumentRenderer<ConsoleFormattingAnnotation> Constructors ConsoleDocumentRenderer() Declaration public ConsoleDocumentRenderer() Methods NewLine(CancellationToken) Write a line break into the output stream. Declaration public ValueTask NewLine(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the line break has been written to the output stream. PopAnnotation(CancellationToken) Discard the value of a previous call to PushAnnotation(T, CancellationToken) . Declaration public ValueTask PopAnnotation(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the value has been popped from the stack. PushAnnotation(ConsoleFormattingAnnotation, CancellationToken) Accept an annotation. Declaration public ValueTask PushAnnotation(ConsoleFormattingAnnotation value, CancellationToken cancellationToken = null) Parameters Type Name Description ConsoleFormattingAnnotation value CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the value has been pushed onto the stack. Text(ReadOnlyMemory<Char>, CancellationToken) Write some text into the output stream. Declaration public ValueTask Text(ReadOnlyMemory<char> memory, CancellationToken cancellationToken = null) Parameters Type Name Description ReadOnlyMemory < Char > memory The text to write to the output stream. CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the text has been written to the output stream. WhiteSpace(Int32, CancellationToken) Write the given amount of blank space into the output stream. Declaration public ValueTask WhiteSpace(int amount, CancellationToken cancellationToken = null) Parameters Type Name Description Int32 amount The amount of white space to write. CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the white space has been written to the output stream. Implements IDocumentRenderer<T>"
  },
  "Gutenberg.Rendering.ConsoleFormattingAnnotation.BackgroundColor.html": {
    "href": "Gutenberg.Rendering.ConsoleFormattingAnnotation.BackgroundColor.html",
    "title": "Class ConsoleFormattingAnnotation.BackgroundColor | Gutenberg",
    "keywords": "Class ConsoleFormattingAnnotation.BackgroundColor Set the BackgroundColor Inheritance Object ConsoleFormattingAnnotation ConsoleFormattingAnnotation.BackgroundColor Implements IEquatable < ConsoleFormattingAnnotation > IEquatable < ConsoleFormattingAnnotation.BackgroundColor > Declaration public class BackgroundColor : ConsoleFormattingAnnotation Constructors BackgroundColor(ConsoleFormattingAnnotation.BackgroundColor) Declaration protected BackgroundColor(ConsoleFormattingAnnotation.BackgroundColor original) Parameters Type Name Description ConsoleFormattingAnnotation.BackgroundColor original BackgroundColor(ConsoleColor) Set the BackgroundColor Declaration public BackgroundColor(ConsoleColor Color) Parameters Type Name Description ConsoleColor Color The colour Properties Color The colour Declaration public ConsoleColor Color { get; set; } Property Value Type Description ConsoleColor EqualityContract Declaration protected override Type EqualityContract { get; } Property Value Type Description Type Overrides ConsoleFormattingAnnotation.EqualityContract Methods <Clone>$() Declaration public override ConsoleFormattingAnnotation.BackgroundColor <Clone>$() Returns Type Description ConsoleFormattingAnnotation.BackgroundColor Overrides ConsoleFormattingAnnotation.<Clone>$() Deconstruct(out ConsoleColor) Declaration public void Deconstruct(out ConsoleColor Color) Parameters Type Name Description ConsoleColor Color Equals(ConsoleFormattingAnnotation) Declaration public sealed override bool Equals(ConsoleFormattingAnnotation other) Parameters Type Name Description ConsoleFormattingAnnotation other Returns Type Description Boolean Overrides ConsoleFormattingAnnotation.Equals(ConsoleFormattingAnnotation) Equals(ConsoleFormattingAnnotation.BackgroundColor) Declaration public virtual bool Equals(ConsoleFormattingAnnotation.BackgroundColor other) Parameters Type Name Description ConsoleFormattingAnnotation.BackgroundColor other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ConsoleFormattingAnnotation.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ConsoleFormattingAnnotation.GetHashCode() PrintMembers(StringBuilder) Declaration protected override bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean Overrides ConsoleFormattingAnnotation.PrintMembers(StringBuilder) ToString() Declaration public override string ToString() Returns Type Description String Overrides ConsoleFormattingAnnotation.ToString() Operators Equality(ConsoleFormattingAnnotation.BackgroundColor, ConsoleFormattingAnnotation.BackgroundColor) Declaration public static bool operator ==(ConsoleFormattingAnnotation.BackgroundColor left, ConsoleFormattingAnnotation.BackgroundColor right) Parameters Type Name Description ConsoleFormattingAnnotation.BackgroundColor left ConsoleFormattingAnnotation.BackgroundColor right Returns Type Description Boolean Inequality(ConsoleFormattingAnnotation.BackgroundColor, ConsoleFormattingAnnotation.BackgroundColor) Declaration public static bool operator !=(ConsoleFormattingAnnotation.BackgroundColor left, ConsoleFormattingAnnotation.BackgroundColor right) Parameters Type Name Description ConsoleFormattingAnnotation.BackgroundColor left ConsoleFormattingAnnotation.BackgroundColor right Returns Type Description Boolean Implements System.IEquatable<T> System.IEquatable<T>"
  },
  "Gutenberg.Rendering.ConsoleFormattingAnnotation.ForegroundColor.html": {
    "href": "Gutenberg.Rendering.ConsoleFormattingAnnotation.ForegroundColor.html",
    "title": "Class ConsoleFormattingAnnotation.ForegroundColor | Gutenberg",
    "keywords": "Class ConsoleFormattingAnnotation.ForegroundColor Set the ForegroundColor Inheritance Object ConsoleFormattingAnnotation ConsoleFormattingAnnotation.ForegroundColor Implements IEquatable < ConsoleFormattingAnnotation > IEquatable < ConsoleFormattingAnnotation.ForegroundColor > Declaration public class ForegroundColor : ConsoleFormattingAnnotation Constructors ForegroundColor(ConsoleFormattingAnnotation.ForegroundColor) Declaration protected ForegroundColor(ConsoleFormattingAnnotation.ForegroundColor original) Parameters Type Name Description ConsoleFormattingAnnotation.ForegroundColor original ForegroundColor(ConsoleColor) Set the ForegroundColor Declaration public ForegroundColor(ConsoleColor Color) Parameters Type Name Description ConsoleColor Color The colour Properties Color The colour Declaration public ConsoleColor Color { get; set; } Property Value Type Description ConsoleColor EqualityContract Declaration protected override Type EqualityContract { get; } Property Value Type Description Type Overrides ConsoleFormattingAnnotation.EqualityContract Methods <Clone>$() Declaration public override ConsoleFormattingAnnotation.ForegroundColor <Clone>$() Returns Type Description ConsoleFormattingAnnotation.ForegroundColor Overrides ConsoleFormattingAnnotation.<Clone>$() Deconstruct(out ConsoleColor) Declaration public void Deconstruct(out ConsoleColor Color) Parameters Type Name Description ConsoleColor Color Equals(ConsoleFormattingAnnotation) Declaration public sealed override bool Equals(ConsoleFormattingAnnotation other) Parameters Type Name Description ConsoleFormattingAnnotation other Returns Type Description Boolean Overrides ConsoleFormattingAnnotation.Equals(ConsoleFormattingAnnotation) Equals(ConsoleFormattingAnnotation.ForegroundColor) Declaration public virtual bool Equals(ConsoleFormattingAnnotation.ForegroundColor other) Parameters Type Name Description ConsoleFormattingAnnotation.ForegroundColor other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ConsoleFormattingAnnotation.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ConsoleFormattingAnnotation.GetHashCode() PrintMembers(StringBuilder) Declaration protected override bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean Overrides ConsoleFormattingAnnotation.PrintMembers(StringBuilder) ToString() Declaration public override string ToString() Returns Type Description String Overrides ConsoleFormattingAnnotation.ToString() Operators Equality(ConsoleFormattingAnnotation.ForegroundColor, ConsoleFormattingAnnotation.ForegroundColor) Declaration public static bool operator ==(ConsoleFormattingAnnotation.ForegroundColor left, ConsoleFormattingAnnotation.ForegroundColor right) Parameters Type Name Description ConsoleFormattingAnnotation.ForegroundColor left ConsoleFormattingAnnotation.ForegroundColor right Returns Type Description Boolean Inequality(ConsoleFormattingAnnotation.ForegroundColor, ConsoleFormattingAnnotation.ForegroundColor) Declaration public static bool operator !=(ConsoleFormattingAnnotation.ForegroundColor left, ConsoleFormattingAnnotation.ForegroundColor right) Parameters Type Name Description ConsoleFormattingAnnotation.ForegroundColor left ConsoleFormattingAnnotation.ForegroundColor right Returns Type Description Boolean Implements System.IEquatable<T> System.IEquatable<T>"
  },
  "Gutenberg.Rendering.ConsoleFormattingAnnotation.html": {
    "href": "Gutenberg.Rendering.ConsoleFormattingAnnotation.html",
    "title": "Class ConsoleFormattingAnnotation | Gutenberg",
    "keywords": "Class ConsoleFormattingAnnotation A base class for annotations which the ConsoleDocumentRenderer understands Inheritance Object ConsoleFormattingAnnotation ConsoleFormattingAnnotation.BackgroundColor ConsoleFormattingAnnotation.ForegroundColor Implements IEquatable < ConsoleFormattingAnnotation > Declaration public abstract class ConsoleFormattingAnnotation : Object Constructors ConsoleFormattingAnnotation(ConsoleFormattingAnnotation) Declaration protected ConsoleFormattingAnnotation(ConsoleFormattingAnnotation original) Parameters Type Name Description ConsoleFormattingAnnotation original Properties EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type Methods <Clone>$() Declaration public abstract ConsoleFormattingAnnotation <Clone>$() Returns Type Description ConsoleFormattingAnnotation Equals(ConsoleFormattingAnnotation) Declaration public virtual bool Equals(ConsoleFormattingAnnotation other) Parameters Type Name Description ConsoleFormattingAnnotation other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(ConsoleFormattingAnnotation, ConsoleFormattingAnnotation) Declaration public static bool operator ==(ConsoleFormattingAnnotation left, ConsoleFormattingAnnotation right) Parameters Type Name Description ConsoleFormattingAnnotation left ConsoleFormattingAnnotation right Returns Type Description Boolean Inequality(ConsoleFormattingAnnotation, ConsoleFormattingAnnotation) Declaration public static bool operator !=(ConsoleFormattingAnnotation left, ConsoleFormattingAnnotation right) Parameters Type Name Description ConsoleFormattingAnnotation left ConsoleFormattingAnnotation right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "Gutenberg.Rendering.DocumentRendererExtensions.html": {
    "href": "Gutenberg.Rendering.DocumentRendererExtensions.html",
    "title": "Class DocumentRendererExtensions | Gutenberg",
    "keywords": "Class DocumentRendererExtensions Extension methods for IDocumentRenderer<T> . Inheritance Object DocumentRendererExtensions Declaration public static class DocumentRendererExtensions : Object Methods MapAnnotations<T, U>(IDocumentRenderer<U>, Func<T, U>) Creates an IDocumentRenderer<T> which wraps the specified renderer by applying a Func<T,TResult> to all of the annotations in the input Document<T> . Declaration public static IDocumentRenderer<T> MapAnnotations<T, U>(this IDocumentRenderer<U> renderer, Func<T, U> selector) Parameters Type Name Description IDocumentRenderer <U> renderer The wrapped document renderer. Func <T, U> selector The function to apply to the annotations. Returns Type Description IDocumentRenderer <T> An IDocumentRenderer<T> which wraps an renderer by applying a Func<T,TResult> to all of the annotations in the input Document<T> . Type Parameters Name Description T The type of annotations in the input Document<T> . U The type of annotations accepted by the wrapped IDocumentRenderer<T> . MapAnnotations<T, U>(IDocumentRenderer<U>, Func<T, ValueTask<U>>) Creates an IDocumentRenderer<T> which wraps the specified renderer by applying an asynchronous Func<T,TResult> to all of the annotations in the input Document<T> . Declaration public static IDocumentRenderer<T> MapAnnotations<T, U>(this IDocumentRenderer<U> renderer, Func<T, ValueTask<U>> selector) Parameters Type Name Description IDocumentRenderer <U> renderer The wrapped document renderer. Func <T, ValueTask <U>> selector The function to apply to the annotations. Returns Type Description IDocumentRenderer <T> An IDocumentRenderer<T> which wraps an renderer by applying a Func<T,TResult> to all of the annotations in the input Document<T> . Type Parameters Name Description T The type of annotations in the input Document<T> . U The type of annotations accepted by the wrapped IDocumentRenderer<T> ."
  },
  "Gutenberg.Rendering.html": {
    "href": "Gutenberg.Rendering.html",
    "title": "Namespace Gutenberg.Rendering | Gutenberg",
    "keywords": "Namespace Gutenberg.Rendering Classes ConsoleDocumentRenderer An IDocumentRenderer<T> which writes formatted text to the Console . ConsoleFormattingAnnotation A base class for annotations which the ConsoleDocumentRenderer understands ConsoleFormattingAnnotation.BackgroundColor Set the BackgroundColor ConsoleFormattingAnnotation.ForegroundColor Set the ForegroundColor DocumentRendererExtensions Extension methods for IDocumentRenderer<T> . MapAnnotationsDocumentRenderer<T, U> An IDocumentRenderer<T> which wraps an IDocumentRenderer<T> by applying an asynchronous Func<T,TResult> to all of the annotations in the input Document<T> . PlainTextDocumentRenderer An IDocumentRenderer<T> which writes to a TextWriter and discards all annotations. PlainTextDocumentRenderer<T> An IDocumentRenderer<T> which writes to a TextWriter and discards all annotations. StackMachineDocumentRenderer<T> A handy base class for IDocumentRenderer<T> implementations which manage annotations in a stack."
  },
  "Gutenberg.Rendering.MapAnnotationsDocumentRenderer-2.html": {
    "href": "Gutenberg.Rendering.MapAnnotationsDocumentRenderer-2.html",
    "title": "Class MapAnnotationsDocumentRenderer<T, U> | Gutenberg",
    "keywords": "Class MapAnnotationsDocumentRenderer<T, U> An IDocumentRenderer<T> which wraps an IDocumentRenderer<T> by applying an asynchronous Func<T,TResult> to all of the annotations in the input Document<T> . Inheritance Object MapAnnotationsDocumentRenderer<T, U> Implements IDocumentRenderer <T> Declaration public class MapAnnotationsDocumentRenderer<T, U> : Object, IDocumentRenderer<T> Type Parameters Name Description T The type of annotations in the input Document<T> . U The type of annotations accepted by the wrapped IDocumentRenderer<T> . Constructors MapAnnotationsDocumentRenderer(Func<T, ValueTask<U>>, IDocumentRenderer<U>) Creates a MapAnnotationsDocumentRenderer<T, U> . Declaration public MapAnnotationsDocumentRenderer(Func<T, ValueTask<U>> selector, IDocumentRenderer<U> wrapped) Parameters Type Name Description Func <T, ValueTask <U>> selector The function to apply to the annotations. IDocumentRenderer <U> wrapped The wrapped document renderer. Methods NewLine(CancellationToken) Write a line break into the output stream. Declaration public ValueTask NewLine(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the line break has been written to the output stream. PopAnnotation(CancellationToken) Discard the value of a previous call to PushAnnotation(T, CancellationToken) . Declaration public ValueTask PopAnnotation(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the value has been popped from the stack. PushAnnotation(T, CancellationToken) Accept an annotation. Declaration public ValueTask PushAnnotation(T value, CancellationToken cancellationToken = null) Parameters Type Name Description T value The annotation to push onto the stack. CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the value has been pushed onto the stack. Text(ReadOnlyMemory<Char>, CancellationToken) Write some text into the output stream. Declaration public ValueTask Text(ReadOnlyMemory<char> memory, CancellationToken cancellationToken = null) Parameters Type Name Description ReadOnlyMemory < Char > memory The text to write to the output stream. CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the text has been written to the output stream. WhiteSpace(Int32, CancellationToken) Write the given amount of blank space into the output stream. Declaration public ValueTask WhiteSpace(int amount, CancellationToken cancellationToken = null) Parameters Type Name Description Int32 amount The amount of white space to write. CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the white space has been written to the output stream. Implements IDocumentRenderer<T>"
  },
  "Gutenberg.Rendering.PlainTextDocumentRenderer.html": {
    "href": "Gutenberg.Rendering.PlainTextDocumentRenderer.html",
    "title": "Class PlainTextDocumentRenderer | Gutenberg",
    "keywords": "Class PlainTextDocumentRenderer An IDocumentRenderer<T> which writes to a TextWriter and discards all annotations. Inheritance Object PlainTextDocumentRenderer < Object > PlainTextDocumentRenderer Implements IDocumentRenderer < Object > Inherited Members PlainTextDocumentRenderer<Object>.Text(ReadOnlyMemory<Char>, CancellationToken) PlainTextDocumentRenderer<Object>.NewLine(CancellationToken) PlainTextDocumentRenderer<Object>.WhiteSpace(Int32, CancellationToken) PlainTextDocumentRenderer<Object>.PushAnnotation(Object, CancellationToken) PlainTextDocumentRenderer<Object>.PopAnnotation(CancellationToken) PlainTextDocumentRenderer<Object>.Writer Declaration public class PlainTextDocumentRenderer : PlainTextDocumentRenderer<object>, IDocumentRenderer<object> Remarks This is a convenient subclass of PlainTextDocumentRenderer<T> which simply sets the type parameter to Object , without changing any behaviours. Constructors PlainTextDocumentRenderer(TextWriter) Create a PlainTextDocumentRenderer . Declaration public PlainTextDocumentRenderer(TextWriter writer) Parameters Type Name Description TextWriter writer The output TextWriter . Implements IDocumentRenderer<T>"
  },
  "Gutenberg.Rendering.PlainTextDocumentRenderer-1.html": {
    "href": "Gutenberg.Rendering.PlainTextDocumentRenderer-1.html",
    "title": "Class PlainTextDocumentRenderer<T> | Gutenberg",
    "keywords": "Class PlainTextDocumentRenderer<T> An IDocumentRenderer<T> which writes to a TextWriter and discards all annotations. Inheritance Object PlainTextDocumentRenderer<T> PlainTextDocumentRenderer Implements IDocumentRenderer <T> Declaration public class PlainTextDocumentRenderer<T> : Object, IDocumentRenderer<T> Type Parameters Name Description T The type of annotations in the document. Constructors PlainTextDocumentRenderer(TextWriter) Create a PlainTextDocumentRenderer<T> . Declaration public PlainTextDocumentRenderer(TextWriter writer) Parameters Type Name Description TextWriter writer The output TextWriter . Properties Writer The output TextWriter . Declaration protected TextWriter Writer { get; } Property Value Type Description TextWriter Methods NewLine(CancellationToken) Write a line break into the output stream. Declaration public virtual ValueTask NewLine(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the line break has been written to the output stream. PopAnnotation(CancellationToken) Discard the value of a previous call to PushAnnotation(T, CancellationToken) . Declaration public virtual ValueTask PopAnnotation(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the value has been popped from the stack. PushAnnotation(T, CancellationToken) Accept an annotation. Declaration public virtual ValueTask PushAnnotation(T value, CancellationToken cancellationToken = null) Parameters Type Name Description T value The annotation to push onto the stack. CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the value has been pushed onto the stack. Text(ReadOnlyMemory<Char>, CancellationToken) Write some text into the output stream. Declaration public virtual ValueTask Text(ReadOnlyMemory<char> memory, CancellationToken cancellationToken = null) Parameters Type Name Description ReadOnlyMemory < Char > memory The text to write to the output stream. CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the text has been written to the output stream. WhiteSpace(Int32, CancellationToken) Write the given amount of blank space into the output stream. Declaration public virtual ValueTask WhiteSpace(int amount, CancellationToken cancellationToken = null) Parameters Type Name Description Int32 amount The amount of white space to write. CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the white space has been written to the output stream. Implements IDocumentRenderer<T>"
  },
  "Gutenberg.Rendering.StackMachineDocumentRenderer-1.html": {
    "href": "Gutenberg.Rendering.StackMachineDocumentRenderer-1.html",
    "title": "Class StackMachineDocumentRenderer<T> | Gutenberg",
    "keywords": "Class StackMachineDocumentRenderer<T> A handy base class for IDocumentRenderer<T> implementations which manage annotations in a stack. Inheritance Object StackMachineDocumentRenderer<T> Implements IDocumentRenderer <T> Declaration public abstract class StackMachineDocumentRenderer<T> : Object, IDocumentRenderer<T> Type Parameters Name Description T The type of annotations in the input Document<T> . Constructors StackMachineDocumentRenderer() Declaration protected StackMachineDocumentRenderer() Properties CurrentAnnotation Get the topmost annotation from the stack, or return a default value. Declaration protected T CurrentAnnotation { get; } Property Value Type Description T HasAnnotation Returns true if there are annotations in the stack. Declaration protected bool HasAnnotation { get; } Property Value Type Description Boolean Stack The stack of annotations. Declaration protected Stack<T> Stack { get; } Property Value Type Description Stack <T> Methods NewLine(CancellationToken) Write a line break into the output stream. Declaration public abstract ValueTask NewLine(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the line break has been written to the output stream. OnBeforePopAnnotation(T, CancellationToken) Called when value is about to be popped off the Stack . Declaration protected virtual ValueTask OnBeforePopAnnotation(T value, CancellationToken cancellationToken = null) Parameters Type Name Description T value The value. CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will be awaited before popping the value off the Stack . Remarks If the stack is mutated (by an override of this method) before the returned ValueTask completes, the value which is on top of the stack after the ValueTask resolves will be popped (and passed to OnPopAnnotation(T, CancellationToken) ) instead. OnBeforePushAnnotation(T, CancellationToken) Called when value is about to be pushed onto the Stack . Declaration protected virtual ValueTask OnBeforePushAnnotation(T value, CancellationToken cancellationToken = null) Parameters Type Name Description T value The value. CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will be awaited before pushing the value on to the Stack . OnPopAnnotation(T, CancellationToken) Called immediately after value has been popped off the Stack . Declaration protected virtual ValueTask OnPopAnnotation(T value, CancellationToken cancellationToken = null) Parameters Type Name Description T value The value. CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will be awaited before returning from PopAnnotation(CancellationToken) . OnPushAnnotation(T, CancellationToken) Called immediately after value has been pushed onto the Stack . Declaration protected virtual ValueTask OnPushAnnotation(T value, CancellationToken cancellationToken = null) Parameters Type Name Description T value The value. CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will be awaited before returning from PushAnnotation(T, CancellationToken) . PopAnnotation(CancellationToken) Discard the value of a previous call to PushAnnotation(T, CancellationToken) . Declaration public virtual ValueTask PopAnnotation(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the value has been popped from the stack. PushAnnotation(T, CancellationToken) Accept an annotation. Declaration public virtual ValueTask PushAnnotation(T value, CancellationToken cancellationToken = null) Parameters Type Name Description T value The annotation to push onto the stack. CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the value has been pushed onto the stack. Text(ReadOnlyMemory<Char>, CancellationToken) Write some text into the output stream. Declaration public abstract ValueTask Text(ReadOnlyMemory<char> memory, CancellationToken cancellationToken = null) Parameters Type Name Description ReadOnlyMemory < Char > memory The text to write to the output stream. CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the text has been written to the output stream. WhiteSpace(Int32, CancellationToken) Write the given amount of blank space into the output stream. Declaration public abstract ValueTask WhiteSpace(int amount, CancellationToken cancellationToken = null) Parameters Type Name Description Int32 amount The amount of white space to write. CancellationToken cancellationToken A CancellationToken . Returns Type Description ValueTask A ValueTask which will complete when the white space has been written to the output stream. Implements IDocumentRenderer<T>"
  },
  "index.html": {
    "href": "index.html",
    "title": "Page Redirection",
    "keywords": ""
  }
}